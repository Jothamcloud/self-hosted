#!/usr/bin/env python3
import boto3
import subprocess
import os
import time

DOCKER_COMPOSE_DIR = "/opt/docker-compose"

def run_command(command):
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True, cwd=DOCKER_COMPOSE_DIR)
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        print("Error executing command: " + command)
        print("Error: " + str(e.stderr))
        raise

def check_docker_status():
    print("Checking Docker status...")
    
    try:
        # Check if docker-compose.yml exists
        if not os.path.exists(os.path.join(DOCKER_COMPOSE_DIR, "docker-compose.yml")):
            print(f"docker-compose.yml not found in {DOCKER_COMPOSE_DIR}")
            return False
            
        # Try to list docker volumes
        print("Checking Docker volumes...")
        volumes = run_command("docker volume ls")
        print("Found volumes:", volumes)
        
        # Try to get docker-compose version
        print("Checking docker-compose version...")
        run_command("docker-compose version")
        
        # Try to get docker-compose config
        print("Checking docker-compose config...")
        run_command("docker-compose config")
        
        return True
    except Exception as e:
        print(f"Error checking Docker status: {str(e)}")
        return False

def get_latest_backups():
    s3 = boto3.client('s3',
                     aws_access_key_id='{{ s3_access_key }}',
                     aws_secret_access_key='{{ s3_secret_key }}')
    
    bucket_name = '{{ s3_bucket_name }}'
    backups = {}
    
    print(f"Listing objects in bucket {bucket_name}")
    response = s3.list_objects_v2(Bucket=bucket_name)
    
    for obj in response.get('Contents', []):
        if obj['Key'].startswith('sh_'):
            service_name = obj['Key'].split('_')[1]
            if service_name not in backups or obj['LastModified'] > backups[service_name]['date']:
                backups[service_name] = {
                    'key': obj['Key'],
                    'date': obj['LastModified']
                }
                print(f"Found backup for {service_name}: {obj['Key']}")
    
    return backups

def restore_volume(volume_name, backup_key):
    print("Restoring volume " + volume_name + " from " + backup_key)
    
    local_backup = "/tmp/" + backup_key
    s3 = boto3.client('s3',
                     aws_access_key_id='{{ s3_access_key }}',
                     aws_secret_access_key='{{ s3_secret_key }}')
    
    print(f"Downloading {backup_key} from S3...")
    s3.download_file('{{ s3_bucket_name }}', backup_key, local_backup)
    
    try:
        service_name = volume_name.replace('sh_', '').replace('_data', '').replace('_letsencrypt', '')
        print(f"Stopping service {service_name}...")
        run_command("docker-compose stop " + service_name)
        
        print("Restoring volume data...")
        restore_cmd = (
            "docker run --rm -v " + volume_name + ":/volume_data "
            "-v /tmp:/backup alpine sh -c "
            "'rm -rf /volume_data/* && cd /volume_data && tar xzf /backup/" + os.path.basename(backup_key) + "'"
        )
        run_command(restore_cmd)
        
        print(f"Successfully restored {volume_name}")
        
    finally:
        if os.path.exists(local_backup):
            os.remove(local_backup)
        
        print(f"Starting service {service_name}...")
        run_command("docker-compose up -d " + service_name)

def main():
    try:
        print("Starting restore process...")
        
        # Check Docker setup
        if not check_docker_status():
            raise Exception("Docker environment is not properly configured")
        
        # Get latest backups
        print("Getting latest backups from S3...")
        latest_backups = get_latest_backups()
        
        # Get volumes
        print("Getting Docker volumes...")
        volumes = run_command("docker volume ls --format '{% raw %}{{.Name}}{% endraw %}'").split('\n')
        print("Found volumes:", volumes)
        
        # Process volumes
        for volume in volumes:
            if volume.startswith('sh_'):
                service_name = volume.split('_')[1]
                if service_name in latest_backups:
                    restore_volume(volume, latest_backups[service_name]['key'])
        
        print("Restore completed successfully")
        
    except Exception as e:
        print("Error during restore: " + str(e))
        exit(1)

if __name__ == "__main__":
    main()